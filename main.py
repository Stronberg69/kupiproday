import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = 'BOT_TOKEN'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot_log.log'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_TYPE, ENTERING_NAME, ENTERING_PRICE, ENTERING_CONTACT, SENDING_PHOTOS = range(5)

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
announcements = []

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
PHOTOS_DIR = 'photos'
if not os.path.exists(PHOTOS_DIR):
    os.makedirs(PHOTOS_DIR)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    keyboard = [
        [KeyboardButton("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


async def create_ad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    keyboard = [
        [KeyboardButton("üõí –ö—É–ø–ª—é"), KeyboardButton("üí∞ –ü—Ä–æ–¥–∞–º")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return CHOOSING_TYPE


async def handle_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    text = update.message.text.replace('üõí ', '').replace('üí∞ ', '')

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    if text not in ["–ö—É–ø–ª—é", "–ü—Ä–æ–¥–∞–º"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
        return CHOOSING_TYPE

    context.user_data['type'] = text
    keyboard = [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=reply_markup
    )
    return ENTERING_NAME


async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    """
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
    )
    return ENTERING_PRICE


async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
    """
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    try:
        price = float(update.message.text.replace(' ', ''))
        if context.user_data['type'] == "–ö—É–ø–ª—é":
            context.user_data['price'] = f"{price:} ‚ÇΩ"
        else:
            context.user_data['price'] = f"{price:} ‚ÇΩ"
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return ENTERING_PRICE

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ username –≤ Telegram)"
    )
    return ENTERING_CONTACT


async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    context.user_data['contact'] = update.message.text

    # –ï—Å–ª–∏ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è "–ö—É–ø–ª—é", —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    if context.user_data['type'] == "–ö—É–ø–ª—é":
        context.user_data['photos'] = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        return await save_announcement(update, context)

    # –ï—Å–ª–∏ —Ç–∏–ø "–ü—Ä–æ–¥–∞–º", –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
    keyboard = [
        [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 5 —à—Ç—É–∫)\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ'",
        reply_markup=reply_markup
    )
    context.user_data['photos'] = []
    return SENDING_PHOTOS


async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    if update.message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ":
        return await save_announcement(update, context)

    if update.message.photo:
        if len(context.user_data.get('photos', [])) >= 5:
            await update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ'")
            return SENDING_PHOTOS

        photo = update.message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        try:
            file = await photo.get_file()
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            ad_dir = f"{PHOTOS_DIR}/ad_{len(announcements)}"
            if not os.path.exists(ad_dir):
                os.makedirs(ad_dir)

            file_name = f"{ad_dir}/photo_{len(context.user_data.get('photos', []))}.jpg"
            await file.download_to_drive(file_name)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'photos' not in context.user_data:
                context.user_data['photos'] = []

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ file_id —Ñ–æ—Ç–æ
            context.user_data['photos'].append({
                'path': file_name,
                'file_id': photo.file_id
            })

            await update.message.reply_text(
                f"–§–æ—Ç–æ #{len(context.user_data['photos'])} –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                f"–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ {5 - len(context.user_data['photos'])} —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ'"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    return SENDING_PHOTOS


async def save_announcement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    announcement = {
        'type': context.user_data['type'],
        'name': context.user_data['name'],
        'price': context.user_data['price'],
        'contact': context.user_data['contact'],
        'photos': context.user_data.get('photos', []).copy()  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    }
    announcements.append(announcement)

    keyboard = [
        [KeyboardButton("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    await update.message.reply_text(
        "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


async def view_announcements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    """
    if not announcements:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    for i, ad in enumerate(announcements, 1):
        message = (
            f"üìå –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{i}\n"
            f"–¢–∏–ø: {ad['type']}\n"
            f"–¢–æ–≤–∞—Ä: {ad['name']}\n"
            f"{'–ë—é–¥–∂–µ—Ç' if ad['type'] == '–ö—É–ø–ª—é' else '–¶–µ–Ω–∞'}: {ad['price']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {ad['contact']}"
        )

        if ad['photos']:
            try:
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
                media_group = []
                first_photo = True
                for photo in ad['photos']:
                    if first_photo:
                        media_group.append(InputMediaPhoto(
                            media=photo['file_id'],
                            caption=message
                        ))
                        first_photo = False
                    else:
                        media_group.append(InputMediaPhoto(
                            media=photo['file_id']
                        ))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø–æ–π
                await update.message.reply_media_group(media=media_group)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                await update.message.reply_text(message)
        else:
            await update.message.reply_text(message)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    keyboard = [
        [KeyboardButton("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    """
    logger.error(f"Update {update} caused error {context.error}")
    try:
        if update and update.message:
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex('^(üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)$'), create_ad),
            MessageHandler(filters.Regex('^(üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è)$'), view_announcements),
        ],
        states={
            CHOOSING_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_type)],
            ENTERING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            ENTERING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price)],
            ENTERING_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact)],
            SENDING_PHOTOS: [
                MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_photos),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
        ],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex('^(üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è)$'), view_announcements))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()